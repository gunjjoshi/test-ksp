generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id        String          @id @default(uuid())
  email          String          @unique
  name           String
  notes          note[]
  courses        course[]
  subjects       subject[]
  pyqs           pyq[]
  instructors    instructor[]
  note_upvotes   note_upvote[]
  course_upvotes course_upvote[]
  pyq_upvotes    pyq_upvote[]
}

model subject {
  id            Int      @id @unique @default(autoincrement())
  code          String   @unique
  name          String   @db.VarChar(255)
  created_by    user     @relation(fields: [created_by_id], references: [user_id], onDelete: Restrict)
  created_by_id String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  notes         note[]
  pyqs          pyq[]
}

model instructor {
  id            Int      @id @unique @default(autoincrement())
  name          String   @db.VarChar(255)
  created_by    user     @relation(fields: [created_by_id], references: [user_id], onDelete: Restrict)
  created_by_id String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  notes         note[]
  pyqs          pyq[]
}

model note {
  id            Int           @id @unique @default(autoincrement())
  title         String        @db.VarChar(255)
  url           String        @db.VarChar(255)
  subject       subject       @relation(fields: [subject_code], references: [code])
  subject_code  String        @db.VarChar(255)
  semester      String        @db.VarChar(255)
  instructor    instructor    @relation(fields: [instructor_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  instructor_id Int
  branch        String        @db.VarChar(255)
  anonymous     Boolean
  created_by    user          @relation(fields: [created_by_id], references: [user_id], onDelete: Restrict)
  created_by_id String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  upvotes       note_upvote[]
}

model note_upvote {
  id      Int    @id @unique @default(autoincrement())
  user    user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  notes   note   @relation(fields: [note_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  note_id Int

  @@unique([user_id, note_id])
}

model course {
  id            Int             @id @unique @default(autoincrement())
  title         String          @db.VarChar(255)
  code          String          @unique @db.VarChar(100)
  anonymous     Boolean
  created_by    user            @relation(fields: [created_by_id], references: [user_id], onDelete: Restrict)
  created_by_id String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  upvotes       course_upvote[]
}

model course_upvote {
  id        Int    @id @unique @default(autoincrement())
  user      user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  user_id   String
  course    course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course_id Int

  @@unique([user_id, course_id])
}

model pyq {
  id            Int          @id @unique @default(autoincrement())
  title         String       @db.VarChar(255)
  url           String       @db.VarChar(255)
  subject       subject      @relation(fields: [subject_code], references: [code])
  subject_code  String       @db.VarChar(255)
  branch        String       @db.VarChar(255)
  semester      String       @db.VarChar(100)
  instructor    instructor   @relation(fields: [instructor_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  instructor_id Int
  anonymous     Boolean
  created_by    user         @relation(fields: [created_by_id], references: [user_id], onDelete: Restrict)
  created_by_id String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  upvotes       pyq_upvote[]
}

model pyq_upvote {
  id      Int    @id @unique @default(autoincrement())
  user    user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  user_id String
  pyq     pyq    @relation(fields: [pyq_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pyq_id  Int

  @@unique([user_id, pyq_id])
}
