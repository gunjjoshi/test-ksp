import { useAuth } from "../contexts/auth";
import useSWR, { mutate } from 'swr'
import { api } from "../utils/api";
import { useEffect, useMemo, useState } from "react";
import { useTable } from 'react-table'
import Head from 'next/head'
import { AddNoteModal } from '../components/Notes/AddNoteModal'
import { BsPlus } from "react-icons/bs";
import { AddPYQModal } from "../components/PYQs/AddPYQModal";
import { toast } from "react-hot-toast";
import { Table } from "../components/PYQs/Table";
import { getPyqs } from "../services/db/pyqs/getPyqs";
import { pyqsColumnData } from "../types/pyqsColumnData";
import { UpdatePYQModal } from "../components/PYQs/UpdatePYQModal";

export default function Courses() {
    //? contexts
    const { user, loading }: any = useAuth()

    //? states
    const [isDataFetching, setIsDataFetching] = useState<boolean>(false)
    const [pyqs, setPYQs] = useState<pyqsColumnData[]>([])
    const [selectedPYQ, setSelectedPYQ] = useState<any>(null)
    const [showAddPYQModal, setShowAddPYQModal] = useState<boolean>(false)

    const refetchPYQs = () => {
        setIsDataFetching(true)
        getPyqs()
            .then(res => {
                setPYQs(res)
                setIsDataFetching(false)
            })
    }

    //? effects
    useEffect(() => {
        setIsDataFetching(true)
        getPyqs()
            .then(res => {
                setPYQs(res)
                setIsDataFetching(false)
            })
    }, [])

    return (
        <div className={`w-full bg-white flex flex-col`}>
            {
                user && <AddPYQModal refetchPYQs={refetchPYQs} showAddPYQModal={showAddPYQModal} setShowAddPYQModal={setShowAddPYQModal} />
            }
            {
                selectedPYQ && <UpdatePYQModal selectedPYQ={selectedPYQ} setSelectedPYQ={selectedPYQ} refetchPYQs={refetchPYQs} />
            }
            <Head>
                <title>PYQs</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="grid grid-cols-5 gap-0 justify-center py-48 px-5 md:px-14 space-y-8 min-h-screen">
                <div
                    className="col-span-5 flex flex-row items-center justify-between">
                    <h3 className="font-bold text-xl md:text-3xl">PYQs</h3>
                    <button
                        disabled={loading}
                        onClick={() => {
                            if (user)
                                setShowAddPYQModal(true)
                            else toast("Please login to add new PYQ", {
                                icon: 'ℹ️'
                            })
                        }}
                        type="button" className="flex items-center space-x-2 px-2 py-1 duration-200 transition-all rounded-md shadow-md hover:shadow-xl bg-primary text-white font-semibold disabled:bg-primary/70 disabled:cursor-wait">
                        <BsPlus className="h-8 w-8" />
                        <span className="">
                            Add PYQs
                        </span>
                    </button>
                </div>
                <div className='col-span-5 flex w-full h-fit overflow-x-auto'>
                    <Table pyqs={pyqs} setSelectedPYQ={setSelectedPYQ} refetchNotes={refetchPYQs} isDataFetching={isDataFetching} />
                </div>
            </div>
        </div>
    )
}