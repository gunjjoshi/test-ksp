import Head from 'next/head'
import { BsPencilSquare, BsPlus } from 'react-icons/bs'
import { useAuth } from '../../contexts/auth'
import { useEffect, useState } from 'react'
import { coursesColumnData } from '../../types/coursesColumnData'
import { toast } from 'react-hot-toast'
import { getCourses } from '../../services/db/courses/getCourses'
import { Modal } from '../../components/Courses/Modal'
import { addCourse } from '../../services/db/courses/addCourse'
import { updateCourse } from '../../services/db/courses/updateCourse'
import { Player } from '@lottiefiles/react-lottie-player'
import { useRouter } from 'next/router'
import { RiDeleteBin6Line } from 'react-icons/ri'
import { deleteCourse } from '../../services/db/courses/deleteCourse'

export default function Courses() {
    //? router
    const router = useRouter()

    //? contexts
    const { user, loading }: any = useAuth()

    //? states
    const [isDataFetching, setIsDataFetching] = useState<boolean>(false)
    const [showAddCourseModal, setShowAddCourseModal] = useState<boolean>(false)
    const [showUpdateCourseModal, setShowUpdateCourseModal] =
        useState<boolean>(false)
    const [selectedCourse, setSelectedCourse] = useState<any>(null)
    const [courses, setCourses] = useState<coursesColumnData[]>([])

    //? functions
    const refetchCourses = () => {
        setIsDataFetching(true)
        getCourses().then((res) => {
            setCourses(res)
            setIsDataFetching(false)
        })
    }

    //? effects
    useEffect(() => {
        setIsDataFetching(true)
        getCourses().then((res) => {
            setCourses(res)
            setIsDataFetching(false)
        })
    }, [])

    useEffect(() => {
        if (selectedCourse) setShowUpdateCourseModal(true)
        else setShowUpdateCourseModal(false)
    }, [selectedCourse])

    return (
        <div className={`w-full bg-white flex flex-col`}>
            {user && (
                <Modal
                    header="Add New Course"
                    actionButtonText="Add Course"
                    actionFunction={addCourse}
                    refetch={refetchCourses}
                    showModal={showAddCourseModal}
                    setShowModal={setShowAddCourseModal}
                />
            )}
            {selectedCourse && (
                <Modal
                    header="Update Course"
                    actionButtonText="Update Course"
                    isUpdateModal={true}
                    selectedEntity={selectedCourse}
                    actionFunction={updateCourse}
                    refetch={refetchCourses}
                    showModal={showUpdateCourseModal}
                    setShowModal={setShowUpdateCourseModal}
                />
            )}
            <Head>
                <title>Courses</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    href="/favicon.ico"
                />
            </Head>
            <div className="grid grid-cols-5 gap-0 justify-center py-48 px-5 md:px-14 space-y-8 min-h-screen">
                <div className="col-span-5 flex flex-row items-center justify-between">
                    <h3 className="font-bold text-xl md:text-3xl">Courses</h3>
                    <button
                        disabled={loading}
                        onClick={() => {
                            if (user) setShowAddCourseModal(true)
                            else
                                toast('Please login to add new course', {
                                    icon: 'ℹ️',
                                })
                        }}
                        type="button"
                        className="flex items-center space-x-2 px-2 py-1 duration-200 transition-all rounded-md shadow-md hover:shadow-xl bg-primary text-white font-semibold disabled:bg-primary/70 disabled:cursor-wait"
                    >
                        <BsPlus className="h-8 w-8" />
                        <span className="">Add Course</span>
                    </button>
                </div>
                <div className="col-span-5 flex flex-wrap md:justify-start justify-center gap-8 h-fit w-full">
                    {isDataFetching ? (
                        Array(8)
                            .fill({})
                            .map((res, index) => {
                                return (
                                    <div
                                        key={index}
                                        role="status"
                                        className="shadow-md p-6 rounded-md animate-pulse"
                                    >
                                        <div className="h-2.5 bg-gray-400 rounded-full w-48 mb-4"></div>
                                        <div className="h-2 bg-gray-400 rounded-full max-w-[360px] mb-2.5"></div>
                                        <div className="h-2 bg-gray-400 rounded-full mb-2.5"></div>
                                        <div className="h-2 bg-gray-400 rounded-full max-w-[330px] mb-2.5"></div>
                                        <div className="h-2 bg-gray-400 rounded-full max-w-[300px] mb-2.5"></div>
                                        <div className="h-2 bg-gray-400 rounded-full max-w-[360px]"></div>
                                        <span className="sr-only">
                                            Loading...
                                        </span>
                                    </div>
                                )
                            })
                    ) : courses.length ? (
                        courses.map((course: any) => {
                            return (
                                <div
                                    onClick={() =>
                                        router.push('/courses/' + course.id)
                                    }
                                    className="cursor-pointer group bg-primary/5 shadow-md hover:shadow-xl duration-150 transition-all p-6 w-full md:w-auto rounded-md flex flex-col gap-3"
                                    key={course.id}
                                >
                                    <div className="flex gap-7 items-center justify-between">
                                        <p className="font-semibold text-primary group-hover:underline duration-150 transition-all text-xl">
                                            {course.title}
                                        </p>
                                        {user &&
                                            user.user_id ===
                                                course.created_by_id && (
                                                <div className="flex items-center gap-1">
                                                    <button
                                                        className="p-2 rounded-full hover:bg-gray-200 duration-150"
                                                        onClick={(e) =>
                                                            setSelectedCourse(
                                                                course
                                                            )
                                                        }
                                                    >
                                                        <BsPencilSquare className="h-5 w-5 text-primary" />
                                                    </button>
                                                    <button
                                                        className="p-2 rounded-full hover:bg-gray-200 duration-150"
                                                        onClick={(e) => {
                                                            deleteCourse(
                                                                course.id,
                                                                refetchCourses
                                                            )
                                                        }}
                                                    >
                                                        <RiDeleteBin6Line className="h-5 w-5 text-red-500" />
                                                    </button>
                                                </div>
                                            )}
                                    </div>
                                    <div className="flex gap-2 items-center">
                                        <p className="font-semibold">
                                            Instructor:
                                        </p>
                                        <p>{course.instructor.name}</p>
                                    </div>
                                    <div className="flex gap-2 items-center">
                                        <p className="font-semibold">
                                            Created By:
                                        </p>
                                        {course.anonymous ? (
                                            <p>Anonymous</p>
                                        ) : (
                                            <p>{course.created_by.name}</p>
                                        )}
                                    </div>
                                    <div className="flex gap-2 items-center">
                                        <p className="font-semibold">
                                            Reviews:
                                        </p>
                                        <p>{course._count.reviews}</p>
                                    </div>
                                </div>
                            )
                        })
                    ) : (
                        <div className="col-span-5 pt-24 w-full flex flex-col items-center justify-center">
                            <Player
                                autoplay={true}
                                loop={true}
                                className="h-56 w-56"
                                src="https://assets7.lottiefiles.com/packages/lf20_ttvteyvs.json"
                            />
                            <span className="font-bold text-2xl text-gray-700">
                                No Records Found
                            </span>
                        </div>
                    )}
                </div>
            </div>
        </div>
    )
}
